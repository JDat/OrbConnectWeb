Developer's Changelog:

version 2.0 - Note some messages are not backward compatible
- Add new speed messages for 
    -- True Airspeed (TruSpd)
    -- Indicated Airspeed (IndSpd)
    -- Ground speed (GndSpd)
    -- Orbital speed (OrbSpd)
    -- Equivalent airspeed (EquSpd)
- Add Flight Status message
- Add Autopilot Settings message (APSettings)
- Updated Elements message where all parameters are optional (deprecates others)
- Updated SHIP:<>:NavModeStates to always append values for the three XR autopilots.
- Add several relative position and velocity messages under a new NAV: command
- Moved SHIP messages relating to relative position and velocity to NAV.
- Add messages to read, list, and set nav radios
- Add message to list GBodies in hierarchical fashion
- Updated SHIP:<>:NavModeStates to make the XR autopilot positions always available
- Bug fix for VACCEL
- Bug fix to prevent subscribing to subscriptions
- Bug fix to improve precision of numbers in messages
- Bug fix to Elements messages
- Minor refactoring


Version 1.1
- Added XR2Ravenstar as an XRVessel

- Updated SHIP:<>:NavModeStates to append the three XR autopilots if the target vessel uses XRVesselCtrl.

- Added new ORB:SetHudBrightness command. HUD brightness can be set as a level (0-100)


Version 1.0
-Made some changes (removed unused variables, adding some typecasting) to ensure warning-free compiling on VS2008

-Moved the definition of the globals previously defined in OrbConnect.h to OrbConnect.cpp; a declaration (extern) for each remains.  This allows the OrbConnect.h header to be included by other files if necessary.

-Changed name of "void CommandParser(long lParam, string Command)" to "void parseCommand(long lParam, string Command)" to avoid conflicts with the CommandParser class

-Slightly modified the readConfig() function so that the value from oapiReadItem_string() has a place to go (previously it was storing to an uninitialized char *, changed to a char[]).  Was this ever tested?  It seems to me like it would have caused a segfault, or just plain not worked.

-Reduced the number of threads created from 1 + n + SUM(0,n,xn + 1) (where n is the number of clients and xn is the number of messages received from client n) to 1 + n.  Instead of creating a new thread to handle the next incoming message, the thread now loops.

-Changed dwID to have 3 elements rather than 2, to prevent an array overrun

-Removed unnecessary (duplicate) header files from the project

-Added the following functions:
SHIP:<FOCUS or ship name>:Accel
SHIP:<FOCUS or ship name>:VAccel

-Added the SubscriptionParser.h and SubscriptionParser.cpp files to handle subscription-based data delivery.
Message is sent as follows:
SUBSCRIBE:<delay in 1/20ths of a second>:<Command>
Returns an integer ID guaranteed to be unique and > 1000
The ID allows faster determination of what the incoming message is for

Ex:
Client sends "SUBSCRIBE:20:SHIP:FOCUS:Alt"
Server replies with "SUBSCRIBE:20:SHIP:FOCUS:Alt=1000"
Then, at one second intervals, the server will send the following:
"1000=<altitude>" (without the < >)

